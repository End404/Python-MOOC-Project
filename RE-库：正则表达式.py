
#------------ RE库 正则表达式 -------------#

#*******************************************************************
'''
-----------------------------------
    regular expression, regex, 
    RE 正则表达式是用来简洁表达一组字符串的表达式
    --------------------------------------------
    正则表达式是用来简洁表达一组字符串的表达式 
    正则表达式是一种通用的字符串表达框架 
    进一步:
        正则表达式是一种针对字符串表达“简洁”和“特征”思想的工具 正则表达式可以用来判断某字符串的特征归属
    --------------------------------------------------------
    正则表达式在文本处理中十分常用：
        表达文本类型的特征（病毒、入侵等） 
        同时查找或替换一组字符串 匹配字符串的全部或部分 
     
        最主要应用在字符串匹配中
           ……
'''
#*******************************************************************
'''
    ----- 操作符 --------------------------- 说明 ------------------------------- 实例 -----

        .  -----------      表示任何单个字符      --------------------------------------- 
     [ ]  -----------       字符集，对单个字符给出取值范围.      --------    [abc]表示a、b、c，[a‐z]表示a到z单个字符.
     [^ ]  -----------      非字符集，对单个字符给出排除范围.    ------     [^abc]表示非a或b或c的单个字符.
     *   -----------        前一个字符0次或无限次扩展.           ----------        abc* 表示 ab、abc、abcc、abccc等.
     +   -----------        前一个字符1次或无限次扩展.           ----------        abc+ 表示 abc、abcc、abccc等.
     ?  -----------         前一个字符0次或1次扩展.              -------------        abc? 表示 ab、abc.
     |  -----------         左右表达式任意一个.                  ----------------        abc|def 表示 abc、def.

     {m}  -----------       扩展前一个字符m次.          ----------------   ab{2}c表示abbc.
     {m,n}  -----------     扩展前一个字符m至n次（含n）. -----------      ab{1,2}c表示abc、abbc.
     ^  -----------          匹配字符串开头.         ---------------    ^abc表示abc且在一个字符串的开头.
     $   -----------         匹配字符串结尾.         ---------------    abc$表示abc且在一个字符串的结尾.
     ( )  -----------       分组标记，内部只能使用 | 操作符.  -----------   (abc)表示abc，(abc|def)表示abc、def.
     \d   -----------       数字，等价于[0‐9].       -----------------------------------------
     \w   -----------       单词字符，等价于[A‐Za‐z0‐9_].     --------------------------------

'''
#********************************************************************


#-------------Re库的基本使用 -------

import re

# re.search(pattern, string, flags=0) 在一个字符串中搜索匹配正则表达式的第一个位置;返回match对象:
match = re.search( r'[1-9]\d{5}', 'BIt 100081' )
if match:
    print ( "re.search: " ,match.group( 0 ) ) 


# re.match(pattern, string, flags=0) 从一个字符串的开始位置起匹配正则表达式 返回match对象：
'''
# 有问题：
match = re.match( r'[1-9]\d{5}', 'BIt 100081' )
if match:
    match.group( 0 ) 
print (match.group(0))
'''

ma = re.match( r'[1-9]\d{5}', '100081 BIt' )
if ma:
    print ( 're.match: ', ma.group(0) ) 
print ( ma )


# re.findall(pattern, string, flags=0) 搜索字符串，以列表类型返回全部能匹配的子串：
ls = re.findall( r'[1-9]\d{5}', 'BIt100081 TSu100084' )
print ( 're.findall: ' , ls )


# re.split(pattern, string, maxsplit=0, flags=0) 将一个字符串按照正则表达式匹配结果进行分割 返回列表类型:
print ( re.split( 're.split: ',  r'[1-9]\d{5}', 'BIt 100081 TSU1000084' ) )
print ( re.split( 're.split: ' , r'[1-9]\d{5}', 'BIt 100081 TSU1000084', maxsplit=1 ) )


# re.finditer(pattern, string, flags=0) 搜索字符串，返回一个匹配结果的迭代类型，每个迭代 元素是match对象:
for m in re.finditer( r'[1-9]\d{5}', 'BIt100081 TSU100084' ):
    if m :
        print ( 're.finditer: ', m.group(0) )


# re.sub(pattern, repl, string, count=0, flags=0) 在一个字符串中替换所有匹配正则表达式的子串 , 返回替换后的字符串:
print ( 're.sub: ' , re.sub( r'[1-9]\d{5}', ':ziocode', 'BIT100081 TSU100084' ) )


